{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SortableItem","SortableElement","_ref","value","react_default","a","createElement","className","style","listStyle","src","concat","alt","SortableList","SortableContainer","_ref2","items","map","index","key","App","state","openImg","onSortEnd","_ref3","oldIndex","newIndex","setTimeout","_this","setState","_ref4","arrayMove","closeImg","Fragment","axis","this","onTouchStart","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.287b6dda.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport { SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport arrayMove from 'array-move';\n\nconst SortableItem = SortableElement(({value}) => {\n    return <li className=\"item\" style={{listStyle: 'none'}}><img src={`./image/mm_${value}.png`} alt={value}/></li>\n});\n\nconst SortableList = SortableContainer(({items}) => {\n    return (\n        <ul className=\"list horizontalList\">\n            {items.map((value, index) => (\n                <SortableItem key={`item-${index}`} index={index} value={value}/>\n            ))}\n        </ul>\n    );\n});\nclass App extends Component {\n    state = {\n        items: [\n            \"meta\",\n            \"curiosidade\",\n            \"liberdade\",\n            \"status\",\n            \"aceitacao\",\n            \"relacao\",\n            \"honra\",\n            \"maestria\",\n            \"poder\",\n            \"ordem\",\n        ],\n        openImg: false\n    };\n    onSortEnd = ({oldIndex, newIndex}) => {\n        if(oldIndex === newIndex){\n            setTimeout(() => {\n                return this.setState({openImg: this.state.items[oldIndex]});\n            },200)\n        }\n        this.setState(({items}) => ({\n            items: arrayMove(items, oldIndex, newIndex),\n        }));\n    };\n\n    closeImg = () => {\n        setTimeout(() => {\n            this.setState({openImg: false});\n        },200)\n    };\n\n    render() {\n        return <>\n            <SortableList\n                axis=\"xy\"\n                items={this.state.items} onTouchStart={this.closeImg} onSortEnd={this.onSortEnd} />\n            {\n                this.state.openImg && <div className=\"background\" onTouchStart={this.closeImg} onClick={this.closeImg}><img className=\"img-open\" src={`./image/mm_${this.state.openImg}.png`} alt={this.state.openImg}/></div>\n            }\n        </>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}